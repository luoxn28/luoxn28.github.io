<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luoxn28</title>
  
  <subtitle>南</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luoxn28.github.io/"/>
  <updated>2020-07-12T11:23:22.943Z</updated>
  <id>http://luoxn28.github.io/</id>
  
  <author>
    <name>luoxn28</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dubbo provider Filter链是如何构建的</title>
    <link href="http://luoxn28.github.io/2020/07/12/dubbo-provider-filter-lian-shi-ru-he-gou-jian-de/"/>
    <id>http://luoxn28.github.io/2020/07/12/dubbo-provider-filter-lian-shi-ru-he-gou-jian-de/</id>
    <published>2020-07-12T11:23:04.000Z</published>
    <updated>2020-07-12T11:23:22.943Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;provider端的Filter链构建是在初始化流程中构建的，我们知道初始化流程肯定会走到方法&lt;code&gt;org.apache.dubbo.remoting.transport.netty4.NettyServer#doOpen&lt;/code&gt;中，可以在该方法打个断点，然后启
        
      
    
    </summary>
    
      <category term="框架研究" scheme="http://luoxn28.github.io/categories/%E6%A1%86%E6%9E%B6%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="dubbo" scheme="http://luoxn28.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo RPC在provider端是如何跑起来的</title>
    <link href="http://luoxn28.github.io/2020/07/12/dubbo-rpc-zai-provider-duan-shi-ru-he-pao-qi-lai-de/"/>
    <id>http://luoxn28.github.io/2020/07/12/dubbo-rpc-zai-provider-duan-shi-ru-he-pao-qi-lai-de/</id>
    <published>2020-07-12T11:12:07.000Z</published>
    <updated>2020-07-12T11:23:04.927Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;dubbo RCP请求到达provider后，首先经过数据接收、解码（NettyWokerThread/NioEventLoop），然后传递到RPC后续流程（DubboServerHandler），即filter、service invoke过程，service
        
      
    
    </summary>
    
      <category term="框架研究" scheme="http://luoxn28.github.io/categories/%E6%A1%86%E6%9E%B6%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="dubbo" scheme="http://luoxn28.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>dubbo provider是如何启动的</title>
    <link href="http://luoxn28.github.io/2020/07/11/dubbo-provider-shi-ru-he-qi-dong-de/"/>
    <id>http://luoxn28.github.io/2020/07/11/dubbo-provider-shi-ru-he-qi-dong-de/</id>
    <published>2020-07-11T13:00:19.000Z</published>
    <updated>2020-07-11T13:15:50.859Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Netty支持多种服务端的server实例，包括mina、netty等，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/07/11/dubbo-provider-shi-ru-he-qi-dong-de/./dubbo
        
      
    
    </summary>
    
      <category term="框架研究" scheme="http://luoxn28.github.io/categories/%E6%A1%86%E6%9E%B6%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="dubbo" scheme="http://luoxn28.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo连通性讨论</title>
    <link href="http://luoxn28.github.io/2020/07/08/dubbo-lian-tong-xing-tao-lun/"/>
    <id>http://luoxn28.github.io/2020/07/08/dubbo-lian-tong-xing-tao-lun/</id>
    <published>2020-07-08T14:30:44.000Z</published>
    <updated>2020-07-08T14:48:00.846Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;关于dubbo连通性，也就是dubbo各组件之间通信、privider和consumer连接、以及通信方式这些功能点。话不多说，让我们一起揭开dubob连通性的面纱吧。&lt;/p&gt;
&lt;h2 id=&quot;dubbo架构&quot;&gt;&lt;a href=&quot;#dubbo架构&quot;
        
      
    
    </summary>
    
      <category term="框架研究" scheme="http://luoxn28.github.io/categories/%E6%A1%86%E6%9E%B6%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="dubbo" scheme="http://luoxn28.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo线程模型</title>
    <link href="http://luoxn28.github.io/2020/07/05/dubbo-xian-cheng-mo-xing/"/>
    <id>http://luoxn28.github.io/2020/07/05/dubbo-xian-cheng-mo-xing/</id>
    <published>2020-07-05T14:45:30.000Z</published>
    <updated>2020-07-05T15:06:46.336Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Dubbo中线程池的应用还是比较广泛的，按照consumer端到provider的RPC的方向来看，consumer端的应用业务线程到netty线程、consuemr端dubbo业务线程池，到provider端的netty
        
      
    
    </summary>
    
      <category term="框架研究" scheme="http://luoxn28.github.io/categories/%E6%A1%86%E6%9E%B6%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="dubbo" scheme="http://luoxn28.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo RPC在consumer端是如何跑起来的</title>
    <link href="http://luoxn28.github.io/2020/07/04/dubbo-rpc-zai-consumer-duan-shi-ru-he-pao-qi-lai-de/"/>
    <id>http://luoxn28.github.io/2020/07/04/dubbo-rpc-zai-consumer-duan-shi-ru-he-pao-qi-lai-de/</id>
    <published>2020-07-04T15:00:02.000Z</published>
    <updated>2020-07-04T15:11:04.472Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Dubbo作为一款高性能Java RPC框架，RPC是其最重要的流程之一。Dubbo
        
      
    
    </summary>
    
      <category term="框架研究" scheme="http://luoxn28.github.io/categories/%E6%A1%86%E6%9E%B6%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="dubbo" scheme="http://luoxn28.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>dubbo的发展历程</title>
    <link href="http://luoxn28.github.io/2020/07/03/dubbo-de-fa-zhan-li-cheng/"/>
    <id>http://luoxn28.github.io/2020/07/03/dubbo-de-fa-zhan-li-cheng/</id>
    <published>2020-07-03T04:58:21.000Z</published>
    <updated>2020-07-03T15:24:33.353Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;http://dubbo.apache.org/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache Dubbo™&lt;/a&gt; 是一款高性能Java
        
      
    
    </summary>
    
      <category term="框架研究" scheme="http://luoxn28.github.io/categories/%E6%A1%86%E6%9E%B6%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="dubbo" scheme="http://luoxn28.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>责任链的2种实现方式</title>
    <link href="http://luoxn28.github.io/2020/06/20/ze-ren-lian-de-2-chong-shi-xian-fang-shi/"/>
    <id>http://luoxn28.github.io/2020/06/20/ze-ren-lian-de-2-chong-shi-xian-fang-shi/</id>
    <published>2020-06-20T13:57:16.000Z</published>
    <updated>2020-07-03T03:05:07.696Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;责任链模式是日常开发或者框架中经常被使用的一种设计模式，典型的责任链有2种实现方式，不知道各位小伙伴更pick哪一种呢？下面就一起来比较下这2种实现方式吧~&lt;/p&gt;
&lt;h2 id=&quot;责任链是什么&quot;&gt;&lt;a href=&quot;#责任链是什么&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="随笔" scheme="http://luoxn28.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="设计模式" scheme="http://luoxn28.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux mmap</title>
    <link href="http://luoxn28.github.io/2020/04/19/linux-mmap/"/>
    <id>http://luoxn28.github.io/2020/04/19/linux-mmap/</id>
    <published>2020-04-19T06:41:37.000Z</published>
    <updated>2020-07-03T02:47:08.264Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;mmap系统调用的作用是在调用进程的虚拟地址空间中创建一个新的内存映射。根据内存背后有无实体文件与之关联，映射可以分成以下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件映射：内存映射区域有实体文件与之关联。mmap系统调用将普通文件的一部分内容直接映射到调用进程的虚拟地址空间。一旦
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://luoxn28.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux管道</title>
    <link href="http://luoxn28.github.io/2020/04/19/linux-guan-dao/"/>
    <id>http://luoxn28.github.io/2020/04/19/linux-guan-dao/</id>
    <published>2020-04-19T06:16:15.000Z</published>
    <updated>2020-07-03T02:47:08.288Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;管道是最早出现的进程间通信的手段，在shell中执行命令，经常会将上一个命令的输出作为下一个命令的输入，由多个命令配合完成一件事情。管道的作用是在有亲缘关系的进程之间传递消息，因为共同主先进程调用过pipe函数，打开的管道文件就会在fork之后，被各个后代进程所共享，打开的
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://luoxn28.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>网络数据是如何传递给进程的</title>
    <link href="http://luoxn28.github.io/2020/04/19/wang-luo-shu-ju-shi-ru-he-chuan-di-gei-jin-cheng-de/"/>
    <id>http://luoxn28.github.io/2020/04/19/wang-luo-shu-ju-shi-ru-he-chuan-di-gei-jin-cheng-de/</id>
    <published>2020-04-19T00:23:13.000Z</published>
    <updated>2020-07-03T02:47:08.250Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;在分析网卡数据是如何传递给进程的流程之前，要知道数据是如何从进程写到网卡的，因为只有发起方写数据到网卡然后接收方才能接收到并处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;发送数据&quot;&gt;&lt;a href=&quot;#发送数据&quot;
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="计算机网络" scheme="http://luoxn28.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>进程是如何调度的</title>
    <link href="http://luoxn28.github.io/2020/04/18/jin-cheng-shi-ru-he-diao-du-de/"/>
    <id>http://luoxn28.github.io/2020/04/18/jin-cheng-shi-ru-he-diao-du-de/</id>
    <published>2020-04-18T14:21:17.000Z</published>
    <updated>2020-07-03T02:47:08.243Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;操作系统运行过程中，CPU都忙于在不同进程（或线程）间执行指令，这就涉及到进程调度，进程调度是到底执行了哪些操作呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先是将当前进程的上下文状态信息予以保护，以便将来能够重新恢复执行，然后将要执行的进程所
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>从sockert api看网络通信流程</title>
    <link href="http://luoxn28.github.io/2020/04/18/cong-socket-api-kan-wang-luo-tong-xin-liu-cheng/"/>
    <id>http://luoxn28.github.io/2020/04/18/cong-socket-api-kan-wang-luo-tong-xin-liu-cheng/</id>
    <published>2020-04-18T12:19:54.000Z</published>
    <updated>2020-07-03T02:47:08.272Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;说了网络通信，大家肯定都不会陌生，比如各种分布式系统、大数据框架等等都要涉及到网络通信，由于大多数通信都是基于TCP协议来的，因此本文就以TCP为例，结合socket
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://luoxn28.github.io/tags/Linux/"/>
    
      <category term="计算机网络" scheme="http://luoxn28.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈TCP的4次挥手</title>
    <link href="http://luoxn28.github.io/2020/04/18/tan-yi-tan-tcp-de-4-ci-hui-shou/"/>
    <id>http://luoxn28.github.io/2020/04/18/tan-yi-tan-tcp-de-4-ci-hui-shou/</id>
    <published>2020-04-18T01:19:14.000Z</published>
    <updated>2020-07-03T02:47:08.251Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;TCP是全双工传输协议，也就是说双方都可进行读写操作，当一方不需要写数据时，会通过发送FIN报文告知对方，我要关闭连接了，对方接受到并返回ACK报文，这就表示一方的连接已经关闭，此时另一方的连接还是OK的，也就是说另一方还是可以继续写数据的，等到另一方也发完数据之后就可以发
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="计算机网络" scheme="http://luoxn28.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>深入理解TCP的3次握手</title>
    <link href="http://luoxn28.github.io/2020/04/17/shen-ru-li-jie-tcp-de-3-ci-wo-shou/"/>
    <id>http://luoxn28.github.io/2020/04/17/shen-ru-li-jie-tcp-de-3-ci-wo-shou/</id>
    <published>2020-04-17T14:27:53.000Z</published>
    <updated>2020-07-03T02:47:08.277Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;说起TCP的三次握手，大多数小伙伴多少都听说过一些，因此本文不再赘述三次握手的详细流程，而是重点关注三次握手中半连接队列和全连接队列流程，以及二者队列满了时的处理机制，最后分析下常见的三次握手的问题，这些问题大都也是和半连接队列和全连接队列相关的。
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="计算机网络" scheme="http://luoxn28.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Linux信号</title>
    <link href="http://luoxn28.github.io/2020/04/12/linux-xin-hao/"/>
    <id>http://luoxn28.github.io/2020/04/12/linux-xin-hao/</id>
    <published>2020-04-12T12:11:26.000Z</published>
    <updated>2020-07-03T02:47:08.287Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;信号是一种异步处理的软中断，内核会发送给进程某些异步事件，这些异步事件可能来自硬件，比如除0或者访问了非法地址；也可能来自其他进程或用户输入，比如ctrl+c。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;信号是一种进程间通信机制，信号都有一个对应的
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://luoxn28.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux inode那些事儿</title>
    <link href="http://luoxn28.github.io/2020/04/11/linux-inode-na-xie-shi-er/"/>
    <id>http://luoxn28.github.io/2020/04/11/linux-inode-na-xie-shi-er/</id>
    <published>2020-04-11T11:40:04.000Z</published>
    <updated>2020-07-03T02:47:08.288Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在理解inode之前，先了解下磁盘扇区，磁盘的最小单位，我们都知道，磁盘一个扇区是512个字节。磁盘读写是都是按照块来操作的，一个块一般是4K，也就是连续的8个扇区，以块为单位读写是为了提高性能。&lt;/p&gt;
&lt;p&gt;文件数据都储存在”块”中，那么很显然，我们还必须找到一个地方储
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://luoxn28.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>页面更换算法</title>
    <link href="http://luoxn28.github.io/2020/04/11/ye-mian-geng-huan-suan-fa/"/>
    <id>http://luoxn28.github.io/2020/04/11/ye-mian-geng-huan-suan-fa/</id>
    <published>2020-04-11T09:12:27.000Z</published>
    <updated>2020-07-03T02:47:08.225Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;操作系统为什么需要页面更换呢，因为物理内存不够，不可能同时加载所需的所有数据页，因此只能加载正在或最近要使用的内存页。页面更换的目标是，尽量替换掉不再使用或者一段时间内不再使用的内存页，要不然会很容易触发缺页中断，该操作代价较大，涉及到从磁盘加载，
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>磁盘IO</title>
    <link href="http://luoxn28.github.io/2020/04/08/ci-pan-io/"/>
    <id>http://luoxn28.github.io/2020/04/08/ci-pan-io/</id>
    <published>2020-04-08T15:18:14.000Z</published>
    <updated>2020-07-03T02:47:08.221Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IOPS：每秒输入输出量（读写次数）。&lt;/li&gt;
&lt;li&gt;吞吐量：单位时间内成功传输的数据量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;VFS（虚拟文件系统层）&quot;&gt;&lt;a href=&quot;#VFS（虚拟文件系统层）&quot;
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统基本概念</title>
    <link href="http://luoxn28.github.io/2020/04/08/cao-zuo-xi-tong-ji-ben-gai-nian/"/>
    <id>http://luoxn28.github.io/2020/04/08/cao-zuo-xi-tong-ji-ben-gai-nian/</id>
    <published>2020-04-08T14:54:36.000Z</published>
    <updated>2020-07-03T02:47:08.240Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;内核态与用户态&quot;&gt;&lt;a href=&quot;#内核态与用户态&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="操作系统" scheme="http://luoxn28.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
</feed>
